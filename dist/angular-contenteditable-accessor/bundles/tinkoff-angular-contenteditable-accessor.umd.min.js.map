{"version":3,"sources":["ng://@tinkoff/angular-contenteditable-accessor/lib/contenteditable-value-accessor.ts","ng://@tinkoff/angular-contenteditable-accessor/lib/module.ts"],"names":["ContenteditableValueAccessor","elementRef","renderer","_this","this","observer","MutationObserver","setTimeout","onChange","processValue","nativeElement","innerHTML","onTouched","prototype","ngAfterViewInit","observe","characterData","childList","subtree","ngOnDestroy","disconnect","onInput","onBlur","writeValue","value","setProperty","registerOnChange","registerOnTouched","setDisabledState","disabled","setAttribute","String","processed","trim","Directive","args","selector","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","decorators","type","Inject","Renderer2","HostListener","ContenteditableValueAccessorModule","NgModule","declarations","exports"],"mappings":"iZAmBA,IAAAA,EAAA,WAuCI,SAAAA,EACyCC,EACDC,GAFxC,IAAAC,EAAAC,KACyCA,KAAAH,WAAAA,EACDG,KAAAF,SAAAA,EAtBhCE,KAAAC,SAAW,IAAIC,iBAAgB,WACnCC,WAAU,WACNJ,EAAKK,SACDR,EAA6BS,aACzBN,EAAKF,WAAWS,cAAcC,gBAStCP,KAAAQ,UAAS,aAKTR,KAAAI,SAAQ,aAsGpB,OA5FIR,EAAAa,UAAAC,gBAAA,WACIV,KAAKC,SAASU,QAAQX,KAAKH,WAAWS,cAAe,CACjDM,eAAe,EACfC,WAAW,EACXC,SAAS,KAOjBlB,EAAAa,UAAAM,YAAA,WACIf,KAAKC,SAASe,cASlBpB,EAAAa,UAAAQ,QADA,WAEIjB,KAAKC,SAASe,aACdhB,KAAKI,SACDR,EAA6BS,aACzBL,KAAKH,WAAWS,cAAcC,aAS1CX,EAAAa,UAAAS,OADA,WAEIlB,KAAKQ,aAQTZ,EAAAa,UAAAU,WAAA,SAAWC,GACPpB,KAAKF,SAASuB,YACVrB,KAAKH,WAAWS,cAChB,YACAV,EAA6BS,aAAae,KASlDxB,EAAAa,UAAAa,iBAAA,SAAiBlB,GACbJ,KAAKI,SAAWA,GAQpBR,EAAAa,UAAAc,kBAAA,SAAkBf,GACdR,KAAKQ,UAAYA,GAQrBZ,EAAAa,UAAAe,iBAAA,SAAiBC,GACbzB,KAAKF,SAAS4B,aACV1B,KAAKH,WAAWS,cAChB,kBACAqB,QAAQF,KASD7B,EAAAS,aAAf,SAA4Be,OAClBQ,EAAYR,GAAS,GAE3B,MAA4B,SAArBQ,EAAUC,OAAoB,GAAKD,uBAzIjDE,EAAAA,UAASC,KAAA,CAAC,CACPC,SACI,iGACJC,UAAW,CACP,CACIC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAU,WAAO,OAAAzC,IAC9B0C,OAAO,iDAvBfC,EAAAA,WAAUC,WAAA,CAAA,CAAAC,KAwDLC,EAAAA,OAAMX,KAAA,CAACQ,EAAAA,qBAnDZI,EAAAA,UAASH,WAAA,CAAA,CAAAC,KAoDJC,EAAAA,OAAMX,KAAA,CAACY,EAAAA,iDA0BXC,EAAAA,aAAYb,KAAA,CAAC,yBAaba,EAAAA,aAAYb,KAAA,CAAC,WA2DlBnC,EA3IA,GCnBAiD,EAAA,WAGA,SAAAA,KAIiD,2BAJhDC,EAAAA,SAAQf,KAAA,CAAC,CACNgB,aAAc,CAACnD,GACfoD,QAAS,CAACpD,OAEmCiD,EAPjD","sourcesContent":["import {\r\n    AfterViewInit,\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    HostListener,\r\n    Inject,\r\n    OnDestroy,\r\n    Renderer2,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\n/*\r\n * This is a barebones contenteditable {@link ControlValueAccessor} allowing you to use\r\n * Angular forms with native contenteditable HTML. For security reasons you might want\r\n * to consider sanitizing pasted/dropped content before using it. Also make sure that\r\n * you do not set any dangerous content as control value yourself, because directive\r\n * just outputs control value as-is.\r\n */\r\n@Directive({\r\n    selector:\r\n        '[contenteditable][formControlName], [contenteditable][formControl], [contenteditable][ngModel]',\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => ContenteditableValueAccessor),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class ContenteditableValueAccessor\r\n    implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n    /*\r\n     * MutationObserver IE11 fallback (as opposed to input event for modern browsers).\r\n     * When mutation removes a tag, i.e. delete is pressed on the last remaining character\r\n     * inside a tag â callback is triggered before the DOM is actually changed, therefore\r\n     * setTimeout is used\r\n     */\r\n    private observer = new MutationObserver(() => {\r\n        setTimeout(() => {\r\n            this.onChange(\r\n                ContenteditableValueAccessor.processValue(\r\n                    this.elementRef.nativeElement.innerHTML,\r\n                ),\r\n            );\r\n        });\r\n    });\r\n\r\n    /*\r\n     * onTouch callback that marks control as touched and allows FormHooks use\r\n     */\r\n    private onTouched = () => {};\r\n\r\n    /*\r\n     * onChange callback that writes value to control and allows FormHooks use\r\n     */\r\n    private onChange: (value: string) => void = () => {};\r\n\r\n    constructor(\r\n        @Inject(ElementRef) private readonly elementRef: ElementRef,\r\n        @Inject(Renderer2) private readonly renderer: Renderer2,\r\n    ) {}\r\n\r\n    /*\r\n     * To support IE11 MutationObserver is used to monitor changes to the content\r\n     */\r\n    ngAfterViewInit() {\r\n        this.observer.observe(this.elementRef.nativeElement, {\r\n            characterData: true,\r\n            childList: true,\r\n            subtree: true,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Disconnect MutationObserver IE11 fallback on destroy\r\n     */\r\n    ngOnDestroy() {\r\n        this.observer.disconnect();\r\n    }\r\n\r\n    /*\r\n     * Listen to input events to write innerHTML value into control,\r\n     * also disconnect MutationObserver as it is not needed if this\r\n     * event works in current browser\r\n     */\r\n    @HostListener('input')\r\n    onInput() {\r\n        this.observer.disconnect();\r\n        this.onChange(\r\n            ContenteditableValueAccessor.processValue(\r\n                this.elementRef.nativeElement.innerHTML,\r\n            ),\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Listen to blur event to mark control as touched\r\n     */\r\n    @HostListener('blur')\r\n    onBlur() {\r\n        this.onTouched();\r\n    }\r\n\r\n    /*\r\n     * Reacts to external change\r\n     *\r\n     * @see {@link ControlValueAccessor#writeValue}\r\n     */\r\n    writeValue(value: string | null) {\r\n        this.renderer.setProperty(\r\n            this.elementRef.nativeElement,\r\n            'innerHTML',\r\n            ContenteditableValueAccessor.processValue(value),\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Registers onChange callback\r\n     *\r\n     * @see {@link ControlValueAccessor#registerOnChange}\r\n     */\r\n    registerOnChange(onChange: (value: string) => void) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    /*\r\n     * Registers onTouch callback\r\n     *\r\n     * @see {@link ControlValueAccessor#registerOnTouched}\r\n     */\r\n    registerOnTouched(onTouched: () => void) {\r\n        this.onTouched = onTouched;\r\n    }\r\n\r\n    /*\r\n     * Sets disabled state by setting contenteditable attribute to true/false\r\n     *\r\n     * @see {@link ControlValueAccessor#setDisabledState}\r\n     */\r\n    setDisabledState(disabled: boolean) {\r\n        this.renderer.setAttribute(\r\n            this.elementRef.nativeElement,\r\n            'contenteditable',\r\n            String(!disabled),\r\n        );\r\n    }\r\n\r\n    /*\r\n     * null and other falsy control values are treated as empty string to\r\n     * prevent IE11 outputting 'null', also single <br> is replaced with empty\r\n     * string when passed to the control\r\n     */\r\n    private static processValue(value: string | null): string {\r\n        const processed = value || '';\r\n\r\n        return processed.trim() === '<br>' ? '' : processed;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {ContenteditableValueAccessor} from './contenteditable-value-accessor';\r\n\r\n@NgModule({\r\n    declarations: [ContenteditableValueAccessor],\r\n    exports: [ContenteditableValueAccessor],\r\n})\r\nexport class ContenteditableValueAccessorModule {}\r\n"]}