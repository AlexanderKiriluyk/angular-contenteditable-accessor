{"version":3,"file":"tinkoff-angular-contenteditable-accessor.js.map","sources":["ng://@tinkoff/angular-contenteditable-accessor/lib/contenteditable-value-accessor.ts","ng://@tinkoff/angular-contenteditable-accessor/lib/module.ts"],"sourcesContent":["import {\r\n    AfterViewInit,\r\n    Directive,\r\n    ElementRef,\r\n    forwardRef,\r\n    HostListener,\r\n    Inject,\r\n    OnDestroy,\r\n    Renderer2,\r\n} from '@angular/core';\r\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\r\n\r\n/*\r\n * This is a barebones contenteditable {@link ControlValueAccessor} allowing you to use\r\n * Angular forms with native contenteditable HTML. For security reasons you might want\r\n * to consider sanitizing pasted/dropped content before using it. Also make sure that\r\n * you do not set any dangerous content as control value yourself, because directive\r\n * just outputs control value as-is.\r\n */\r\n@Directive({\r\n    selector:\r\n        '[contenteditable][formControlName], [contenteditable][formControl], [contenteditable][ngModel]',\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => ContenteditableValueAccessor),\r\n            multi: true,\r\n        },\r\n    ],\r\n})\r\nexport class ContenteditableValueAccessor\r\n    implements ControlValueAccessor, AfterViewInit, OnDestroy {\r\n    /*\r\n     * MutationObserver IE11 fallback (as opposed to input event for modern browsers).\r\n     * When mutation removes a tag, i.e. delete is pressed on the last remaining character\r\n     * inside a tag â callback is triggered before the DOM is actually changed, therefore\r\n     * setTimeout is used\r\n     */\r\n    private observer = new MutationObserver(() => {\r\n        setTimeout(() => {\r\n            this.onChange(\r\n                ContenteditableValueAccessor.processValue(\r\n                    this.elementRef.nativeElement.innerHTML,\r\n                ),\r\n            );\r\n        });\r\n    });\r\n\r\n    /*\r\n     * onTouch callback that marks control as touched and allows FormHooks use\r\n     */\r\n    private onTouched = () => {};\r\n\r\n    /*\r\n     * onChange callback that writes value to control and allows FormHooks use\r\n     */\r\n    private onChange: (value: string) => void = () => {};\r\n\r\n    constructor(\r\n        @Inject(ElementRef) private readonly elementRef: ElementRef,\r\n        @Inject(Renderer2) private readonly renderer: Renderer2,\r\n    ) {}\r\n\r\n    /*\r\n     * To support IE11 MutationObserver is used to monitor changes to the content\r\n     */\r\n    ngAfterViewInit() {\r\n        this.observer.observe(this.elementRef.nativeElement, {\r\n            characterData: true,\r\n            childList: true,\r\n            subtree: true,\r\n        });\r\n    }\r\n\r\n    /*\r\n     * Disconnect MutationObserver IE11 fallback on destroy\r\n     */\r\n    ngOnDestroy() {\r\n        this.observer.disconnect();\r\n    }\r\n\r\n    /*\r\n     * Listen to input events to write innerHTML value into control,\r\n     * also disconnect MutationObserver as it is not needed if this\r\n     * event works in current browser\r\n     */\r\n    @HostListener('input')\r\n    onInput() {\r\n        this.observer.disconnect();\r\n        this.onChange(\r\n            ContenteditableValueAccessor.processValue(\r\n                this.elementRef.nativeElement.innerHTML,\r\n            ),\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Listen to blur event to mark control as touched\r\n     */\r\n    @HostListener('blur')\r\n    onBlur() {\r\n        this.onTouched();\r\n    }\r\n\r\n    /*\r\n     * Reacts to external change\r\n     *\r\n     * @see {@link ControlValueAccessor#writeValue}\r\n     */\r\n    writeValue(value: string | null) {\r\n        this.renderer.setProperty(\r\n            this.elementRef.nativeElement,\r\n            'innerHTML',\r\n            ContenteditableValueAccessor.processValue(value),\r\n        );\r\n    }\r\n\r\n    /*\r\n     * Registers onChange callback\r\n     *\r\n     * @see {@link ControlValueAccessor#registerOnChange}\r\n     */\r\n    registerOnChange(onChange: (value: string) => void) {\r\n        this.onChange = onChange;\r\n    }\r\n\r\n    /*\r\n     * Registers onTouch callback\r\n     *\r\n     * @see {@link ControlValueAccessor#registerOnTouched}\r\n     */\r\n    registerOnTouched(onTouched: () => void) {\r\n        this.onTouched = onTouched;\r\n    }\r\n\r\n    /*\r\n     * Sets disabled state by setting contenteditable attribute to true/false\r\n     *\r\n     * @see {@link ControlValueAccessor#setDisabledState}\r\n     */\r\n    setDisabledState(disabled: boolean) {\r\n        this.renderer.setAttribute(\r\n            this.elementRef.nativeElement,\r\n            'contenteditable',\r\n            String(!disabled),\r\n        );\r\n    }\r\n\r\n    /*\r\n     * null and other falsy control values are treated as empty string to\r\n     * prevent IE11 outputting 'null', also single <br> is replaced with empty\r\n     * string when passed to the control\r\n     */\r\n    private static processValue(value: string | null): string {\r\n        const processed = value || '';\r\n\r\n        return processed.trim() === '<br>' ? '' : processed;\r\n    }\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {ContenteditableValueAccessor} from './contenteditable-value-accessor';\r\n\r\n@NgModule({\r\n    declarations: [ContenteditableValueAccessor],\r\n    exports: [ContenteditableValueAccessor],\r\n})\r\nexport class ContenteditableValueAccessorModule {}\r\n"],"names":[],"mappings":"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"}
